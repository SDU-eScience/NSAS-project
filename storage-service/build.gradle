group 'dk.sdu.cloud'
version '0.4.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.2.41'
    ext.ktor_version = '0.9.2'
    ext.dokka_version = "0.9.16"

    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
    }
}

apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.dokka'

dokka {
    outputFormat = "html"
    outputDirectory = "$buildDir/javadoc"
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "http://dl.bintray.com/kotlin/ktor" }
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
    maven { url "https://dl.bintray.com/kotlin/exposed" }
    maven { url "https://dl.bintray.com/tus/maven" }
    maven {
        url("https://cloud.sdu.dk/archiva/repository/internal")
        credentials {
            username(eScienceCloudUser)
            password(eScienceCloudPassword)
        }
    }
    maven {
        url("https://cloud.sdu.dk/archiva/repository/snapshots")
        credentials {
            username(eScienceCloudUser)
            password(eScienceCloudPassword)
        }
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // ------------
    // Logging
    // ------------
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.9.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.9.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.9.1'
    // ------------

    // ------------
    // ktor
    // ------------
    compile group: 'io.ktor', name: 'ktor-server-core', version: "$ktor_version"
    compile group: 'io.ktor', name: 'ktor-server-netty', version: "$ktor_version"
    compile group: 'io.ktor', name: 'ktor-jackson', version: "$ktor_version"

    // ------------
    // Service
    // ------------
    compile "dk.sdu.cloud:service-common:0.10.0-SNAPSHOT"
    compile "dk.sdu.cloud:auth-api:1.1.0-SNAPSHOT"
    compile "dk.sdu.cloud:notification-api:0.2.0-SNAPSHOT"

    // ------------
    // Bulk download test
    // ------------
    compile group: 'org.kamranzafar', name: 'jtar', version: '2.3'

    // ------------
    // Ceph
    // ------------
    compile files("libs/rados-0.4.0-SNAPSHOT.jar")
    compile group: 'net.java.dev.jna', name: 'jna', version: '4.5.0'
    compile 'io.tus.java.client:tus-java-client:0.3.1'
    compile 'org.jetbrains.exposed:exposed:0.9.1'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.1.4'

    // ------------
    // Testing
    // ------------
    testCompile "junit:junit:4.12"
    testCompile "io.mockk:mockk:1.8"
    testCompile "io.ktor:ktor-server-test-host:$ktor_version"

}

kotlin {
    experimental {
        coroutines "enable"
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

publishing {
    publications {
        api(MavenPublication) {
            groupId(project.group)
            artifactId(project.name.replace("-service", "") + "-api")
            artifact apiJar

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // TODO THIS SHOULD NOT BE HARDCODED
                def tusDepNode = dependenciesNode.appendNode("dependency")
                tusDepNode.appendNode("groupId", "io.tus.java.client")
                tusDepNode.appendNode("artifactId", "tus-java-client")
                tusDepNode.appendNode("version", "0.3.1")
            }
        }
    }

    repositories {
        maven {
            def resolvedUrl = "https://cloud.sdu.dk/archiva/repository/"
            if (project.version.endsWith("-SNAPSHOT")) resolvedUrl += "snapshots"
            else resolvedUrl += "internal"
            url(resolvedUrl)
            credentials {
                username(eScienceCloudUser)
                password(eScienceCloudPassword)
            }
        }
    }
}

sourceSets {
    generated {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath

        kotlin {
            srcDir 'src/generated/kotlin'
        }

        resources {
            srcDir 'src/generated/resources'
        }
    }

    main {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
}

jar {
    from sourceSets.generated.output
}

task cleanGenerated() {
    File outputDir = file("src/generated")
    outputDir.absolutePath
    outputDir.deleteDir()
}
clean.dependsOn(cleanGenerated)

task generateBuildConfig() {
    File outputDir = file("src/generated/kotlin")
    if (!outputDir.exists()) outputDir.mkdirs()

    String simpleName = project.name.replace("-service", "")

    String packageName = "${project.group}.${simpleName}.api"
    File packagePath = file("$outputDir/${packageName.replace('.', '/')}")
    if (!packagePath.exists()) packagePath.mkdirs()

    String className = "${simpleName.capitalize()}ServiceDescription"
    File configFile = file("$packagePath/${className}.kt")
    configFile.delete()
    configFile << """
        package $packageName

        import dk.sdu.cloud.client.ServiceDescription

        object $className : ServiceDescription {
            override val name: String = "${project.name.replace("-service", "")}"
            override val version: String = "${project.version}"
        }
    """.stripIndent().trim()
}
compileKotlin.dependsOn(generateBuildConfig)

task generateServiceManifest() {
    def outputDir = file("src/generated/resources")
    if (!outputDir.exists()) outputDir.mkdirs()
    def manifestFile = file("$outputDir/service_manifest.json")
    manifestFile.delete()
    manifestFile << """
        {
            "name": "${project.name.replace("-service", "")}",
            "version": "${project.version}"
        }
    """.stripIndent().trim()
}

task apiJar(type: Jar) {
    baseName project.name + '-api'
    from sourceSets.main.output
    from sourceSets.generated.output
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    // Not the best idea to include directly from storage/model. It can cause conflicts
    include("**/dk/sdu/cloud/storage/api/**", "**/dk/sdu/cloud/storage/model/**")

    String simpleName = project.name.replace("-service", "")
    String packageName = "${project.group}.${simpleName}.api"
    String folderName = packageName.replace('.', '/')
    include("**/$folderName/**", "service_manifest.json")

    // without this several kotlin features will not work (including extension functions)
    include("META-INF/**/${project.name}.kotlin_module")
    with jar
}
apiJar.dependsOn(generateServiceManifest)

apply plugin: 'application'
mainClassName = "dk.sdu.cloud.storage.MainKt"

run {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}