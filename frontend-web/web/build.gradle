group 'dk.sdu.cloud'
version '1.0.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.2.21'
    ext.ktor_version = '0.9.1'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'maven-publish'
apply plugin: "org.jetbrains.kotlin.jvm"

sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

repositories {
    mavenCentral()
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
    maven { url "https://dl.bintray.com/kotlin/ktor" }

    maven {
        url("https://cloud.sdu.dk/archiva/repository/snapshots")
        credentials {
            username(eScienceCloudUser)
            password(eScienceCloudPassword)
        }
    }

    maven {
        url("https://cloud.sdu.dk/archiva/repository/internal")
        credentials {
            username(eScienceCloudUser)
            password(eScienceCloudPassword)
        }
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile "ch.qos.logback:logback-classic:1.2.1"
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.19.1'
    compile group: 'io.ktor', name: 'ktor-server-core', version: "$ktor_version"
    compile group: 'io.ktor', name: 'ktor-server-netty', version: "$ktor_version"
    compile group: 'io.ktor', name: 'ktor-jackson', version: "$ktor_version"
    compile group: 'io.ktor', name: 'ktor-freemarker', version: "$ktor_version"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.0"
    compile group: 'info.cukes', name: 'cucumber-java', version: '1.2.5'

    compile "dk.sdu.cloud:service-common:0.6.0-SNAPSHOT"
}

mainClassName = 'io.ktor.server.netty.DevelopmentEngine'


publishing {
    publications {
        api(MavenPublication) {
            groupId(project.group)
            artifactId(project.name.replace("-service", "") + "-api")
            artifact apiJar
        }
    }

    repositories {
        maven {
            def resolvedUrl = "https://cloud.sdu.dk/archiva/repository/"
            if (project.version.endsWith("-SNAPSHOT")) resolvedUrl += "snapshots"
            else resolvedUrl += "internal"
            url(resolvedUrl)
            credentials {
                username(eScienceCloudUser)
                password(eScienceCloudPassword)
            }
        }
    }
}

sourceSets {
    generated {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath

        kotlin {
            srcDir 'src/generated/kotlin'
        }

        resources {
            srcDir 'src/generated/resources'
        }
    }

    main {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
}

jar {
    from sourceSets.generated.output
}

task cleanGenerated() {
    File outputDir = file("src/generated")
    outputDir.absolutePath
    outputDir.deleteDir()
}
clean.dependsOn(cleanGenerated)

task generateBuildConfig() {
    File outputDir = file("src/generated/kotlin")
    if (!outputDir.exists()) outputDir.mkdirs()

    String simpleName = project.name.replace("-service", "")

    String packageName = "${project.group}.${simpleName}.api"
    File packagePath = file("$outputDir/${packageName.replace('.', '/')}")
    if (!packagePath.exists()) packagePath.mkdirs()

    String className = "${simpleName.capitalize()}ServiceDescription"
    File configFile = file("$packagePath/${className}.kt")
    configFile.delete()
    configFile << """
        package $packageName

        import dk.sdu.cloud.client.ServiceDescription

        object $className : ServiceDescription {
            override val name: String = "${project.name.replace("-service", "")}"
            override val version: String = "${project.version}"
        }
    """.stripIndent().trim()
}
compileKotlin.dependsOn(generateBuildConfig)

task generateServiceManifest() {
    def outputDir = file("src/generated/resources")
    if (!outputDir.exists()) outputDir.mkdirs()
    def manifestFile = file("$outputDir/service_manifest.json")
    manifestFile.delete()
    manifestFile << """
        {
            "name": "${project.name.replace("-service", "")}",
            "version": "${project.version}"
        }
    """.stripIndent().trim()
}

task apiJar(type: Jar) {
    baseName project.name + '-api'
    from sourceSets.main.output
    from sourceSets.generated.output
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }

    String simpleName = project.name.replace("-service", "")
    String packageName = "${project.group}.${simpleName}.api"
    String folderName = packageName.replace('.', '/')
    include("**/$folderName/**", "service_manifest.json")

    // without this several kotlin features will not work (including extension functions)
    include("META-INF/**/${project.name}.kotlin_module")
    with jar
}
apiJar.dependsOn(generateServiceManifest)